version: "3.8"
services:
  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: changeme
      TREE_POSTGRES_PASSWORD: changeme
      AUTH_POSTGRES_PASSWORD: changeme

      PG_DATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./docker-inits/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - /opt/pgdata:/var/lib/postgresql/data
  migrator:
    environment:
      PG_MIGRATIONS_DIR: /migrations
    depends_on:
      - postgres
    restart: on-failure

  auth_migrator:
    build:
      context: ./auth
      target: auth_migrator
      args:
        PG_AUTH_USERNAME: auther
        PG_AUTH_PASSWORD: changeme
        PG_HOST: postgres
        PG_AUTH_DB: auth
    environment:
      SECRET_KEY: changeme
    depends_on:
      - postgres
    restart: on-failure

  api:
    environment:
      API_PORT: 5000
    depends_on:
      - postgres
      - migrator
    restart: always

  auth_api:
    build:
      context: ./auth
      target: auth_api
      args:
        PG_AUTH_USERNAME: auther
        PG_AUTH_PASSWORD: changeme
        PG_HOST: postgres
        PG_AUTH_DB: auth
    environment:
      SECRET_KEY: changeme
    depends_on:
      - postgres
      - auth_migrator
    restart: always

  frontend:
    ports:
      - 3000:3000
    environment:
      PORT_FRONTEND: 80
    restart: always

  haproxy:
    image: haproxy:2.0.26-buster
    restart: always
    ports:
      - 80:80
    volumes:
      - "./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"


