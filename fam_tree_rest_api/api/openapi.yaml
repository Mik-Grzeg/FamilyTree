openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Genelogy API'
servers:
  - url: 'http://localhost/api/v1/genealogy'
paths:
  /individuals:
    get:
      summary: 'Returns all the individuals'
      security:
        - BearerAuth: []
      operationId: listIndividuals
      tags:
        - individuals
      responses:
        '200':
          description: 'List of the individuals'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Individual'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 'Create an individual'
      operationId: createIndividual
      tags:
        - individuals
      requestBody:
        $ref: '#/components/requestBodies/IndividualBodyPost'
      responses:
        '201':
          description: Created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: 'Update or create individual'
      operationId: putIndividual
      tags:
        - individuals
      requestBody:
        $ref: '#/components/schemas/Individual'
      responses:
        '200':
          description: Updated or created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete/{id}:
      summary: Delete an individual
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the individual to be deleted
      operationId: deleteIndividual
      tags:
        - individuals
      responses:
        '204':
          description: Deleted requested individual
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /relationships:
    post:
      summary: Add new relation
      operationId: addRelation
      tags:
        - relations
      requestBody:
        $ref: '#/components/schemas/Relationship'
      responses:
        '201':
          description: Created new relation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update existing relation or add a new one
      operationId: putRelation
      tags:
        - relations
      requestBody:
        $ref: '#/components/schemas/ExistingRelationship'
      responses:
        '201':
          description: Created new relation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tree/{username}:
    get:
      summary: Get a family tree by ID
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the author of the requested family
      operationId: getTree
      tags:
        - relations
      responses:
        '200':
          description: Family tree structure and basic information about the individuals in the family
          content:
            application/json:
              schema:
                type: objects
                $ref: '#/components/schemas/FamTreeWithInformation'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Health check endpoint
      operationId: checkHealth
      responses:
        '200':
          description: 'Service is healthy'
        '503':
          description: 'Service is not healthy'


components:
  schemas:
    Individual:
      allOf:
        - $ref: '#/components/schemas/IndividualBaseInfo'
        - type: object
          required:
            - id
          properties:
            date_of_birth:
              type: string
              format: date

    IndividualBaseInfo:
      type: object
      required:
        - full_name
        - date_of_birth
      properties:
        id:
          type: string
        names:
          type: string
        date_of_birth:
          type: string
          format: date

    Relationship:
      type: object
      required:
        - individual_1_id
        - individual_2_id
        - relationship_type
        - individual_1_role
        - individual_2_role
      properties:
        individual_1_id:
          type: integer
          format: int32
        individual_2_id:
          type: integer
          format: int32
        relationship_type:
          type: string
          $ref: "#/components/schemas/RelType"
        individual_1_role:
          type: string
          $ref: "#/components/schemas/Role"
        individual_2_role:
          type: string
          $ref: "#/components/schemas/Role"
    ExistingRelationship:
      allOf:
        - $ref: '#/components/schemas/Relationship'
        - type: object
          properties:
            id:
              type: integer
              format: int32

    FamTreeWithInformation:
      type: object
      properties:
        relations:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/FamilyTreeRecord"
        infos:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/IndividualBaseInfo"
        rootId:
          type: string

    FamilyTreeRecord:
      type: object
      properties:
        id:
          type: string
        gender:
          type: string
        siblings:
          type: array
          $ref: "#/components/schemas/VecOfPreparedRelations"
        parents:
          type: array
          $ref: "#/components/schemas/VecOfPreparedRelations"
        children:
          type: array
          $ref: "#/components/schemas/VecOfPreparedRelations"
        spouses:
          type: array
          $ref: "#/components/schemas/VecOfPreparedRelations"


    VecOfPreparedRelations:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          type:
            type: string
            $ref: "#/components/schemas/RelType"

    RelType:
      type: string
      enum: [blood, married, divorced, adopted]

    Role:
      type: string
      enum: [parent, child, spouse, sibling]

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  requestBodies:
    IndividualBodyPost:
      description: Example request body
      required: true
      content:
        application/json:
          schema:
            required:
              - names
              - date_of_birth
              - gender
              - hometown
            properties:
              names:
                type: string
              date_of_birth:
                type: string
                format: date
              date_of_death:
                type: string
                format: date
              gender:
                type: string
              hometown:
                type: string
              job:
                type: string
              relative:
                type: string
              relation:
                type: string
                $ref: "#/components/schemas/RelType"
              role_to_relative:
                type: string
                $ref: "#/components/schemas/Role"
              relatives_role:
                type: string
                $ref: "#/components/schemas/Role"


security:
  - BearerAuth: []
